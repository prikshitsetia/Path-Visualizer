{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onClick","row","extraClassName","g","f","h","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","dRow","dCol","isValid","openSet","closedSet","heuristic","a","b","x","y","Math","sqrt","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","speed","PathfindingVisualizer","state","mouseIsPressed","isStartNodeClicked","isVisualizing","isFinishNodeClicked","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","getNewGridWithChangedStartNode","getNewGridWithChangedFinishNode","document","getElementById","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","event","algo","target","value","queue","currentNode","adjx","adjy","bfs","st","curr","console","log","pop","dfs","winner","current","splice","includes","tempG","astar","unshift","getNodesInShortestPathOrder","animateAlgo","e","name","onChange","visualizeAlgo","disabled","resetBoard","clearPath","speedHandler","selected","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseClick","currentRow","createNode","slice","newNode","previousStart","newPrevNod","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a5bddd22.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      onClick,\r\n      row,\r\n      g,\r\n      f,\r\n      h,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : null;\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onClick={() => onClick(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","const dRow = [-1, 0, 1, 0];\r\nconst dCol = [0, 1, 0, -1];\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n\r\n  let queue = [grid[startNode.row][startNode.col]];\r\n  grid[startNode.row][startNode.col].isVisited = true;\r\n\r\n  while (queue.length !== 0) {\r\n    let currentNode = queue[0];\r\n\r\n    const x = currentNode.row;\r\n    const y = currentNode.col;\r\n\r\n    if (grid[x][y].isFinish) {\r\n      visitedNodesInOrder.push(currentNode);\r\n      return visitedNodesInOrder;\r\n    }\r\n    queue.shift();\r\n    for (let i = 0; i < 4; i++) {\r\n      const adjx = x + dRow[i];\r\n      const adjy = y + dCol[i];\r\n      if (isValid(grid, adjx, adjy)) {\r\n        queue.push(grid[adjx][adjy]);\r\n        grid[adjx][adjy].isVisited = true;\r\n        grid[adjx][adjy].previousNode = currentNode;\r\n      }\r\n    }\r\n    visitedNodesInOrder.push(currentNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\nfunction isValid(grid, row, col) {\r\n  if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isVisited) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isWall) return false;\r\n  return true;\r\n}\r\n","const dRow = [-1, 0, 1, 0];\r\nconst dCol = [0, 1, 0, -1];\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  var st = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  st.push(startNode);\r\n  startNode.isVisited = true;\r\n\r\n  while (st.length !== 0) {\r\n    var curr = st[st.length - 1];\r\n    console.log(curr);\r\n    st.pop();\r\n    var row = curr.row;\r\n    var col = curr.col;\r\n\r\n    if (curr === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    grid[row][col].isVisited = true;\r\n\r\n    for (var i = 0; i < 4; i++) {\r\n      var adjx = row + dRow[i];\r\n      var adjy = col + dCol[i];\r\n      if (isValid(grid, adjx, adjy)) {\r\n        st.push(grid[adjx][adjy]);\r\n        grid[adjx][adjy].previousNode = curr;\r\n      }\r\n    }\r\n    visitedNodesInOrder.push(curr);\r\n  }\r\n}\r\nfunction isValid(grid, row, col) {\r\n  if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isVisited) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isWall) return false;\r\n  return true;\r\n}\r\n","var openSet = [];\r\nvar closedSet = [];\r\nconst dRow = [-1, 0, 1, 0];\r\nconst dCol = [0, 1, 0, -1];\r\nvar visitedNodesInOrder = [];\r\n\r\nfunction heuristic(a, b) {\r\n  let x = b.row - a.row;\r\n  let y = b.col - a.col;\r\n  return Math.sqrt(x * x - y * y);\r\n}\r\n\r\nexport function astar(grid, startNode, finishNode) {\r\n  openSet.push(startNode);\r\n  visitedNodesInOrder.push(startNode);\r\n  startNode.isVisited = true;\r\n  while (openSet.length > 0) {\r\n    //get minimum\r\n    var winner = 0;\r\n    for (let i = 0; i < openSet.length; i++) {\r\n      if (openSet[i].f < openSet[winner].f) {\r\n        winner = i;\r\n      }\r\n    }\r\n\r\n    var current = openSet[winner];\r\n\r\n    console.log(current.row, current.col);\r\n\r\n    if (current.isFinish) {\r\n      console.log(\"end\");\r\n      visitedNodesInOrder.push(current);\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    for (var i = openSet.length - 1; i >= 0; i--) {\r\n      if (openSet[i] === current) {\r\n        console.log(\"found\");\r\n        openSet.splice(i, 1);\r\n      }\r\n    }\r\n    closedSet.push(current);\r\n\r\n    //add neibhours\r\n    for (let i = 0; i < 4; i++) {\r\n      const adjx = current.row + dRow[i];\r\n      const adjy = current.col + dCol[i];\r\n      if (isValid(grid, adjx, adjy)) {\r\n        if (!closedSet.includes(grid[adjx][adjy])) {\r\n          var tempG = current.g + 1;\r\n          if (openSet.includes(grid[adjx][adjy])) {\r\n            if (tempG < grid[adjx][adjy].g) {\r\n              grid[adjx][adjy].g = tempG;\r\n            }\r\n          } else {\r\n            grid[adjx][adjy].g = tempG;\r\n            openSet.push(grid[adjx][adjy]);\r\n          }\r\n          grid[adjx][adjy].isVisited = true;\r\n          grid[adjx][adjy].h = heuristic(grid[adjx][adjy], finishNode);\r\n          grid[adjx][adjy].f = grid[adjx][adjy].g + grid[adjx][adjy].h;\r\n          grid[adjx][adjy].previousNode = current;\r\n        }\r\n      }\r\n    }\r\n    visitedNodesInOrder.push(current);\r\n  }\r\n}\r\nfunction isValid(grid, row, col) {\r\n  if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isWall) return false;\r\n  return true;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { astar } from \"../algorithms/astar\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 35;\r\nlet speed = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      isStartNodeClicked: false,\r\n      isVisualizing: false,\r\n      isFinishNodeClicked: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (!this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseClick(row, col) {\r\n    if (this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithChangedStartNode(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        isStartNodeClicked: false,\r\n        mouseIsPressed: false,\r\n      });\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n    } else if (this.state.isFinishNodeClicked) {\r\n      const newGrid = getNewGridWithChangedFinishNode(\r\n        this.state.grid,\r\n        row,\r\n        col\r\n      );\r\n      this.setState({\r\n        grid: newGrid,\r\n        isFinishNodeClicked: false,\r\n        mouseIsPressed: false,\r\n      });\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n    } else {\r\n      if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n        this.setState({ isStartNodeClicked: true, mouseIsPressed: false });\r\n      } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n        this.setState({ isFinishNodeClicked: true, mouseIsPressed: false });\r\n      }\r\n    }\r\n  }\r\n  handleMouseUp(row, col) {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n    });\r\n  }\r\n  resetBoard() {\r\n    const newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  clearPath() {\r\n    let newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else if (this.state.grid[row][col].isWall) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-wall\";\r\n          newGrid[row][col].isWall = true;\r\n          newGrid[row][col].isVisited = false;\r\n        } else if (this.state.grid[row][col].isVisited) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n          newGrid[row][col].isVisited = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, speed * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, speed * i * 2);\r\n    }\r\n    this.setState({ isVisualizing: false });\r\n  }\r\n\r\n  visualizeAlgo(event) {\r\n    const algo = event.target.value;\r\n    this.setState({ isVisualizing: true });\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = null;\r\n\r\n    switch (algo) {\r\n      case \"dijkstra\":\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        break;\r\n      case \"bfs\":\r\n        visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n        break;\r\n      case \"dfs\":\r\n        visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n        break;\r\n      case \"A*\":\r\n        visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  speedHandler(e) {\r\n    if (e.target.value === \"fast\") {\r\n      speed = 5;\r\n    } else if (e.target.value === \"average\") {\r\n      speed = 20;\r\n    } else {\r\n      speed = 40;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className=\"main-nav\">\r\n          <div className=\"logo\">\r\n            <h2>\r\n              <span>P</span>ath <span>V</span>isualizer\r\n            </h2>\r\n          </div>\r\n          <div className=\"menu-link\">\r\n            <ul>\r\n              <li>\r\n                <select\r\n                  name=\"algo\"\r\n                  id=\"algoList\"\r\n                  onChange={(e) => this.visualizeAlgo(e)}\r\n                  disabled={this.state.isVisualizing}\r\n                >\r\n                  <option value=\"dijkstra\">Dijkstra</option> \r\n                  <option value=\"bfs\">BFS</option>\r\n                  <option value=\"dfs\">DFS (Not a shortest path)</option>\r\n                  <option value=\"A*\">A*</option>\r\n                </select>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  disabled={this.state.isVisualizing}\r\n                  className=\"button\"\r\n                  onClick={() => this.resetBoard()}\r\n                >\r\n                  Reset Board\r\n                </button>\r\n              </li>{\" \"}\r\n              <li>\r\n                <button\r\n                  disabled={this.state.isVisualizing}\r\n                  className=\"button\"\r\n                  onClick={() => this.clearPath()}\r\n                >\r\n                  Clear Path\r\n                </button>\r\n              </li>{\" \"}\r\n              <li>\r\n                <select\r\n                  name=\"speed\"\r\n                  id=\"speedList\"\r\n                  onChange={(e) => this.speedHandler(e)}\r\n                >\r\n                  <option selected value=\"fast\">\r\n                    Fast\r\n                  </option>\r\n                   <option value=\"average\">Average</option>\r\n                  <option value=\"slow\">Slow</option>\r\n                </select>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp(row, col)}\r\n                      row={row}\r\n                      onClick={() => this.handleMouseClick(row, col)}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    g: 0,\r\n    f: 0,\r\n    h: 0,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithChangedStartNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: true,\r\n    isWall: false,\r\n  };\r\n  const previousStart = newGrid[START_NODE_ROW][START_NODE_COL];\r\n  const newPrevNod = {\r\n    ...previousStart,\r\n    isStart: false,\r\n    isWall: false,\r\n  };\r\n  newGrid[START_NODE_ROW][START_NODE_COL] = newPrevNod;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithChangedFinishNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: true,\r\n    isWall: false,\r\n  };\r\n  const previousStart = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n  const newPrevNod = {\r\n    ...previousStart,\r\n    isFinish: false,\r\n    isWall: false,\r\n  };\r\n  newGrid[FINISH_NODE_ROW][FINISH_NODE_COL] = newPrevNod;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import \"./App.css\";\r\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}