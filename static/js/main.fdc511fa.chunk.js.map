{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","onClick","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","dRow","dCol","isValid","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","speed","PathfindingVisualizer","state","mouseIsPressed","isStartNodeClicked","isVisualizing","isFinishNodeClicked","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","getNewGridWithChangedStartNode","getNewGridWithChangedFinishNode","document","getElementById","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","event","algo","target","value","queue","currentNode","x","y","adjx","adjy","bfs","st","curr","console","log","pop","dfs","unshift","getNodesInShortestPathOrder","animateAlgo","e","name","onChange","visualizeAlgo","disabled","resetBoard","clearPath","speedHandler","selected","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseClick","currentRow","createNode","slice","newNode","previousStart","newPrevNod","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wTAIqBA,E,4JACnB,WACE,MAUIC,KAAKC,MATPC,EADF,EACEA,IACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,OACAC,EALF,EAKEA,YACAC,EANF,EAMEA,aACAC,EAPF,EAOEA,UACAC,EARF,EAQEA,QACAC,EATF,EASEA,IAEIC,EAAiBR,EACnB,cACAC,EACA,aACAC,EACA,YACA,KAEJ,OACE,qBACEO,GAAE,eAAUF,EAAV,YAAiBR,GACnBW,UAAS,eAAUF,GACnBL,YAAa,kBAAMA,EAAYI,EAAKR,IACpCK,aAAc,kBAAMA,EAAaG,EAAKR,IACtCM,UAAW,kBAAMA,EAAUE,EAAKR,IAChCO,QAAS,kBAAMA,EAAQC,EAAKR,U,GA5BFY,a,OCA3B,SAASC,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAsCR,SAAqBL,GACnB,IADyB,EACnBM,EAAQ,GADW,cAEPN,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbN,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAda,EAAa,QACtBD,EAAME,KAAKD,IAFS,gCAFC,8BAOzB,OAAOD,EA7CgBG,CAAYT,GAC1BK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAYvB,OAAhB,CAGA,GAAIuB,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAYG,WAAY,EACxBZ,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCa,EAAyBJ,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeY,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMd,SAAWe,EAAMf,YAG/D,SAASY,EAAyBT,EAAMP,GACtC,IAD4C,EACtCoB,EAOR,SAA+Bb,EAAMP,GACnC,IAAMqB,EAAY,GACVnC,EAAaqB,EAAbrB,IAAKQ,EAAQa,EAARb,IACTA,EAAM,GAAG2B,EAAUb,KAAKR,EAAKN,EAAM,GAAGR,IACtCQ,EAAMM,EAAKU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,EAAM,GAAGR,IACpDA,EAAM,GAAGmC,EAAUb,KAAKR,EAAKN,GAAKR,EAAM,IACxCA,EAAMc,EAAK,GAAGU,OAAS,GAAGW,EAAUb,KAAKR,EAAKN,GAAKR,EAAM,IAC7D,OAAOmC,EAAUC,QAAO,SAACC,GAAD,OAAeA,EAASR,aAdrBS,CAAsBjB,EAAMP,GADX,cAErBoB,GAFqB,IAE5C,2BAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASnB,SAAWG,EAAKH,SAAW,EACpCmB,EAASE,aAAelB,GAJkB,+BC3B9C,IAAMmB,EAAO,EAAE,EAAG,EAAG,EAAG,GAClBC,EAAO,CAAC,EAAG,EAAG,GAAI,GAgCxB,SAASC,EAAQ5B,EAAMN,EAAKR,GAC1B,QAAIQ,EAAM,GAAKR,EAAM,GAAKQ,GAAOM,EAAKU,QAAUxB,GAAOc,EAAK,GAAGU,WAG3DV,EAAKN,GAAKR,GAAK6B,YAGff,EAAKN,GAAKR,GAAKG,QCxCrB,IAAMqC,EAAO,EAAE,EAAG,EAAG,EAAG,GAClBC,EAAO,CAAC,EAAG,EAAG,GAAI,GAgCxB,SAASC,EAAQ5B,EAAMN,EAAKR,GAC1B,QAAIQ,EAAM,GAAKR,EAAM,GAAKQ,GAAOM,EAAKU,QAAUxB,GAAOc,EAAK,GAAGU,WAG3DV,EAAKN,GAAKR,GAAK6B,YAGff,EAAKN,GAAKR,GAAKG,Q,UChCjBwC,EAAiB,GACjBC,EAAiB,GACjBC,EAAkB,GAClBC,EAAkB,GAClBC,EAAQ,GAESC,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXnC,KAAM,GACNoC,gBAAgB,EAChBC,oBAAoB,EACpBC,eAAe,EACfC,qBAAqB,GARX,E,qDAYd,WACE,IAAMvC,EAAOwC,IACbxD,KAAKyD,SAAS,CAAEzC,W,6BAGlB,SAAgBN,EAAKR,GACnB,IAAKF,KAAKmD,MAAME,mBAAoB,CAClC,IAAMK,EAAUC,EAA0B3D,KAAKmD,MAAMnC,KAAMN,EAAKR,GAChEF,KAAKyD,SAAS,CAAEzC,KAAM0C,EAASN,gBAAgB,O,8BAInD,SAAiB1C,EAAKR,GACpB,GAAKF,KAAKmD,MAAMC,iBACXpD,KAAKmD,MAAME,mBAAoB,CAClC,IAAMK,EAAUC,EAA0B3D,KAAKmD,MAAMnC,KAAMN,EAAKR,GAChEF,KAAKyD,SAAS,CAAEzC,KAAM0C,O,8BAI1B,SAAiBhD,EAAKR,GACpB,GAAIF,KAAKmD,MAAME,mBAAoB,CACjC,IAAMK,EAAUE,EAA+B5D,KAAKmD,MAAMnC,KAAMN,EAAKR,GACrEF,KAAKyD,SAAS,CACZzC,KAAM0C,EACNL,oBAAoB,EACpBD,gBAAgB,IAElBP,EAAiBnC,EACjBoC,EAAiB5C,OACZ,GAAIF,KAAKmD,MAAMI,oBAAqB,CACzC,IAAMG,EAAUG,EACd7D,KAAKmD,MAAMnC,KACXN,EACAR,GAEFF,KAAKyD,SAAS,CACZzC,KAAM0C,EACNH,qBAAqB,EACrBH,gBAAgB,IAElBL,EAAkBrC,EAClBsC,EAAkB9C,OAEdQ,IAAQmC,GAAkB3C,IAAQ4C,EACpC9C,KAAKyD,SAAS,CAAEJ,oBAAoB,EAAMD,gBAAgB,IACjD1C,IAAQqC,GAAmB7C,IAAQ8C,GAC5ChD,KAAKyD,SAAS,CAAEF,qBAAqB,EAAMH,gBAAgB,M,2BAIjE,SAAc1C,EAAKR,GACjBF,KAAKyD,SAAS,CACZL,gBAAgB,M,wBAGpB,WAEE,IADA,IAAMM,EAAUF,IACP9C,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIR,EAAM,EAAGA,EAAM,GAAIA,IAExB4D,SAASC,eAAT,eAAgCrD,EAAhC,YAAuCR,IAAOW,UAD5CH,IAAQmC,GAAkB3C,IAAQ4C,EAElC,kBACOpC,IAAQqC,GAAmB7C,IAAQ8C,EAE1C,mBAEwD,OAIhEhD,KAAKyD,SAAS,CAAEzC,KAAM0C,M,uBAExB,WAEE,IADA,IAAIA,EAAUF,IACL9C,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAIR,EAAM,EAAGA,EAAM,GAAIA,IACtBQ,IAAQmC,GAAkB3C,IAAQ4C,EACpCgB,SAASC,eAAT,eAAgCrD,EAAhC,YAAuCR,IAAOW,UAC5C,kBACOH,IAAQqC,GAAmB7C,IAAQ8C,EAC5Cc,SAASC,eAAT,eAAgCrD,EAAhC,YAAuCR,IAAOW,UAC5C,mBACOb,KAAKmD,MAAMnC,KAAKN,GAAKR,GAAKG,QACnCyD,SAASC,eAAT,eAAgCrD,EAAhC,YAAuCR,IAAOW,UAC5C,iBACF6C,EAAQhD,GAAKR,GAAKG,QAAS,EAC3BqD,EAAQhD,GAAKR,GAAK6B,WAAY,GACrB/B,KAAKmD,MAAMnC,KAAKN,GAAKR,GAAK6B,YACnC+B,SAASC,eAAT,eAAgCrD,EAAhC,YAAuCR,IAAOW,UAAY,OAC1D6C,EAAQhD,GAAKR,GAAK6B,WAAY,GAIpC/B,KAAKyD,SAAS,CAAEzC,KAAM0C,M,yBAExB,SAAYvC,EAAqB6C,GAC/B,IAD0D,IAAD,kBAChDC,GACP,GAAIA,IAAM9C,EAAoBO,OAI5B,OAHAwC,YAAW,WACT,EAAKC,oBAAoBH,KACxBf,EAAQgB,GACL,CAAN,UAEFC,YAAW,WACT,IAAM3C,EAAOJ,EAAoB8C,GACjCH,SAASC,eAAT,eAAgCxC,EAAKb,IAArC,YAA4Ca,EAAKrB,MAAOW,UACtD,sBACDoC,EAAQgB,IAXJA,EAAI,EAAGA,GAAK9C,EAAoBO,OAAQuC,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,iCAexD,SAAoBD,GAClB,IAD6C,IAAD,WACnCC,GACPC,YAAW,WACT,IAAM3C,EAAOyC,EAAyBC,GACtCH,SAASC,eAAT,eAAgCxC,EAAKb,IAArC,YAA4Ca,EAAKrB,MAAOW,UACtD,4BACDoC,EAAQgB,EAAI,IALRA,EAAI,EAAGA,EAAID,EAAyBtC,OAAQuC,IAAM,EAAlDA,GAOTjE,KAAKyD,SAAS,CAAEH,eAAe,M,2BAGjC,SAAcc,GACZ,IAAMC,EAAOD,EAAME,OAAOC,MAC1BvE,KAAKyD,SAAS,CAAEH,eAAe,IAC/B,IAAQtC,EAAShB,KAAKmD,MAAdnC,KACFC,EAAYD,EAAK6B,GAAgBC,GACjC5B,EAAaF,EAAK+B,GAAiBC,GACrC7B,EAAsB,KAE1B,OAAQkD,GACN,IAAK,WACHlD,EAAsBJ,EAASC,EAAMC,EAAWC,GAChD,MACF,IAAK,MACHC,EFhKD,SAAaH,EAAMC,EAAWC,GACnC,IAAMC,EAAsB,GAExBqD,EAAQ,CAACxD,EAAKC,EAAUP,KAAKO,EAAUf,MAG3C,IAFAc,EAAKC,EAAUP,KAAKO,EAAUf,KAAK6B,WAAY,EAEvB,IAAjByC,EAAM9C,QAAc,CACzB,IAAI+C,EAAcD,EAAM,GAElBE,EAAID,EAAY/D,IAChBiE,EAAIF,EAAYvE,IAEtB,GAAIc,EAAK0D,GAAGC,GAAGxE,SAEb,OADAgB,EAAoBK,KAAKiD,GAClBtD,EAETqD,EAAM3C,QACN,IAAK,IAAIoC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMW,EAAOF,EAAIhC,EAAKuB,GAChBY,EAAOF,EAAIhC,EAAKsB,GAClBrB,EAAQ5B,EAAM4D,EAAMC,KACtBL,EAAMhD,KAAKR,EAAK4D,GAAMC,IACtB7D,EAAK4D,GAAMC,GAAM9C,WAAY,EAC7Bf,EAAK4D,GAAMC,GAAMpC,aAAegC,GAGpCtD,EAAoBK,KAAKiD,GAE3B,OAAOtD,EEoIqB2D,CAAI9D,EAAMC,GAChC,MACF,IAAK,MACHE,EDnKD,SAAaH,EAAMC,EAAWC,GACnC,IAAI6D,EAAK,GACH5D,EAAsB,GAK5B,IAHA4D,EAAGvD,KAAKP,GACRA,EAAUc,WAAY,EAED,IAAdgD,EAAGrD,QAAc,CACtB,IAAIsD,EAAOD,EAAGA,EAAGrD,OAAS,GAC1BuD,QAAQC,IAAIF,GACZD,EAAGI,MACH,IAAIzE,EAAMsE,EAAKtE,IACXR,EAAM8E,EAAK9E,IAEf,GAAI8E,IAAS9D,EACX,OAAOC,EAETH,EAAKN,GAAKR,GAAK6B,WAAY,EAE3B,IAAK,IAAIkC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIW,EAAOlE,EAAMgC,EAAKuB,GAClBY,EAAO3E,EAAMyC,EAAKsB,GAClBrB,EAAQ5B,EAAM4D,EAAMC,KACtBE,EAAGvD,KAAKR,EAAK4D,GAAMC,IACnB7D,EAAK4D,GAAMC,GAAMpC,aAAeuC,GAGpC7D,EAAoBK,KAAKwD,ICwICI,CAAIpE,EAAMC,EAAWC,GAI/C,IAAM8C,EAiLV,SAAqC9C,GACnC,IAAM8C,EAA2B,GAC7BS,EAAcvD,EAClB,KAAuB,OAAhBuD,GACLT,EAAyBqB,QAAQZ,GACjCA,EAAcA,EAAYhC,aAE5B,OAAOuB,EAxL4BsB,CAA4BpE,GAC7DlB,KAAKuF,YAAYpE,EAAqB6C,K,0BAExC,SAAawB,GAETvC,EADqB,SAAnBuC,EAAElB,OAAOC,MACH,GACoB,YAAnBiB,EAAElB,OAAOC,MACV,GAEA,K,oBAIZ,WAAU,IAAD,OACP,EAAiCvE,KAAKmD,MAA9BnC,EAAR,EAAQA,KAAMoC,EAAd,EAAcA,eAEd,OACE,qCACE,sBAAKvC,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SACE,+BACE,qCADF,OACoB,qCADpB,iBAIF,qBAAKA,UAAU,YAAf,SACE,+BACE,6BACE,yBACE4E,KAAK,OACL7E,GAAG,WACH8E,SAAU,SAACF,GAAD,OAAO,EAAKG,cAAcH,IACpCI,SAAU5F,KAAKmD,MAAMG,cAJvB,UAME,wBAAQiB,MAAM,WAAd,sBANF,OAOE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,sBAGJ,6BACE,wBACEqB,SAAU5F,KAAKmD,MAAMG,cACrBzC,UAAU,SACVJ,QAAS,kBAAM,EAAKoF,cAHtB,2BAOI,IACN,6BACE,wBACED,SAAU5F,KAAKmD,MAAMG,cACrBzC,UAAU,SACVJ,QAAS,kBAAM,EAAKqF,aAHtB,0BAOI,IACN,6BACE,yBACEL,KAAK,QACL7E,GAAG,YACH8E,SAAU,SAACF,GAAD,OAAO,EAAKO,aAAaP,IAHrC,UAKE,wBAAQQ,UAAQ,EAACzB,MAAM,OAAvB,kBALF,OAQG,wBAAQA,MAAM,UAAd,qBACD,wBAAQA,MAAM,OAAd,+BAOV,qBAAK1D,UAAU,OAAf,SACGG,EAAKiF,KAAI,SAACvF,EAAKwF,GACd,OACE,8BACGxF,EAAIuF,KAAI,SAAC1E,EAAM4E,GACd,IAAQzF,EAAwCa,EAAxCb,IAAKR,EAAmCqB,EAAnCrB,IAAKC,EAA8BoB,EAA9BpB,SAAUC,EAAoBmB,EAApBnB,QAASC,EAAWkB,EAAXlB,OACrC,OACE,cAAC,EAAD,CAEEH,IAAKA,EACLC,SAAUA,EACVC,QAASA,EACTC,OAAQA,EACR+C,eAAgBA,EAChB9C,YAAa,SAACI,EAAKR,GAAN,OAAc,EAAKkG,gBAAgB1F,EAAKR,IACrDK,aAAc,SAACG,EAAKR,GAAN,OACZ,EAAKmG,iBAAiB3F,EAAKR,IAE7BM,UAAW,kBAAM,EAAK8F,cAAc5F,EAAKR,IACzCQ,IAAKA,EACLD,QAAS,kBAAM,EAAK8F,iBAAiB7F,EAAKR,KAZrCiG,OALHD,e,GAxO2BpF,aAsQ7C0C,EAAiB,WAErB,IADA,IAAMxC,EAAO,GACJN,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAM8F,EAAa,GACVtG,EAAM,EAAGA,EAAM,GAAIA,IAC1BsG,EAAWhF,KAAKiF,EAAWvG,EAAKQ,IAElCM,EAAKQ,KAAKgF,GAEZ,OAAOxF,GAGHyF,EAAa,SAACvG,EAAKQ,GACvB,MAAO,CACLR,MACAQ,MACAN,QAASM,IAAQmC,GAAkB3C,IAAQ4C,EAC3C3C,SAAUO,IAAQqC,GAAmB7C,IAAQ8C,EAC7C5B,SAAUU,IACVC,WAAW,EACX1B,QAAQ,EACRoC,aAAc,OAIZkB,EAA4B,SAAC3C,EAAMN,EAAKR,GAC5C,IAAMwD,EAAU1C,EAAK0F,QACfnF,EAAOmC,EAAQhD,GAAKR,GACpByG,EAAO,2BACRpF,GADQ,IAEXlB,QAASkB,EAAKlB,SAGhB,OADAqD,EAAQhD,GAAKR,GAAOyG,EACbjD,GAEHE,EAAiC,SAAC5C,EAAMN,EAAKR,GACjD,IAAMwD,EAAU1C,EAAK0F,QACfnF,EAAOmC,EAAQhD,GAAKR,GACpByG,EAAO,2BACRpF,GADQ,IAEXnB,SAAS,EACTC,QAAQ,IAEJuG,EAAgBlD,EAAQb,GAAgBC,GACxC+D,EAAU,2BACXD,GADW,IAEdxG,SAAS,EACTC,QAAQ,IAIV,OAFAqD,EAAQb,GAAgBC,GAAkB+D,EAC1CnD,EAAQhD,GAAKR,GAAOyG,EACbjD,GAEHG,EAAkC,SAAC7C,EAAMN,EAAKR,GAClD,IAAMwD,EAAU1C,EAAK0F,QACfnF,EAAOmC,EAAQhD,GAAKR,GACpByG,EAAO,2BACRpF,GADQ,IAEXpB,UAAU,EACVE,QAAQ,IAEJuG,EAAgBlD,EAAQX,GAAiBC,GACzC6D,EAAU,2BACXD,GADW,IAEdzG,UAAU,EACVE,QAAQ,IAIV,OAFAqD,EAAQX,GAAiBC,GAAmB6D,EAC5CnD,EAAQhD,GAAKR,GAAOyG,EACbjD,GC/UMoD,MARf,WACE,OACE,qBAAKjG,UAAU,MAAf,SACE,cAAC,EAAD,OCOSkG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAASC,eAAe,SAM1BgD,M","file":"static/js/main.fdc511fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      onClick,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : null;\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        onClick={() => onClick(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","const dRow = [-1, 0, 1, 0];\r\nconst dCol = [0, 1, 0, -1];\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n\r\n  let queue = [grid[startNode.row][startNode.col]];\r\n  grid[startNode.row][startNode.col].isVisited = true;\r\n\r\n  while (queue.length !== 0) {\r\n    let currentNode = queue[0];\r\n\r\n    const x = currentNode.row;\r\n    const y = currentNode.col;\r\n\r\n    if (grid[x][y].isFinish) {\r\n      visitedNodesInOrder.push(currentNode);\r\n      return visitedNodesInOrder;\r\n    }\r\n    queue.shift();\r\n    for (let i = 0; i < 4; i++) {\r\n      const adjx = x + dRow[i];\r\n      const adjy = y + dCol[i];\r\n      if (isValid(grid, adjx, adjy)) {\r\n        queue.push(grid[adjx][adjy]);\r\n        grid[adjx][adjy].isVisited = true;\r\n        grid[adjx][adjy].previousNode = currentNode;\r\n      }\r\n    }\r\n    visitedNodesInOrder.push(currentNode);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\nfunction isValid(grid, row, col) {\r\n  if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isVisited) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isWall) return false;\r\n  return true;\r\n}\r\n","const dRow = [-1, 0, 1, 0];\r\nconst dCol = [0, 1, 0, -1];\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  var st = [];\r\n  const visitedNodesInOrder = [];\r\n\r\n  st.push(startNode);\r\n  startNode.isVisited = true;\r\n\r\n  while (st.length !== 0) {\r\n    var curr = st[st.length - 1];\r\n    console.log(curr);\r\n    st.pop();\r\n    var row = curr.row;\r\n    var col = curr.col;\r\n\r\n    if (curr === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    grid[row][col].isVisited = true;\r\n\r\n    for (var i = 0; i < 4; i++) {\r\n      var adjx = row + dRow[i];\r\n      var adjy = col + dCol[i];\r\n      if (isValid(grid, adjx, adjy)) {\r\n        st.push(grid[adjx][adjy]);\r\n        grid[adjx][adjy].previousNode = curr;\r\n      }\r\n    }\r\n    visitedNodesInOrder.push(curr);\r\n  }\r\n}\r\nfunction isValid(grid, row, col) {\r\n  if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isVisited) {\r\n    return false;\r\n  }\r\n  if (grid[row][col].isWall) return false;\r\n  return true;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 35;\r\nlet speed = 10;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      isStartNodeClicked: false,\r\n      isVisualizing: false,\r\n      isFinishNodeClicked: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (!this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseClick(row, col) {\r\n    if (this.state.isStartNodeClicked) {\r\n      const newGrid = getNewGridWithChangedStartNode(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        isStartNodeClicked: false,\r\n        mouseIsPressed: false,\r\n      });\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n    } else if (this.state.isFinishNodeClicked) {\r\n      const newGrid = getNewGridWithChangedFinishNode(\r\n        this.state.grid,\r\n        row,\r\n        col\r\n      );\r\n      this.setState({\r\n        grid: newGrid,\r\n        isFinishNodeClicked: false,\r\n        mouseIsPressed: false,\r\n      });\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n    } else {\r\n      if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n        this.setState({ isStartNodeClicked: true, mouseIsPressed: false });\r\n      } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n        this.setState({ isFinishNodeClicked: true, mouseIsPressed: false });\r\n      }\r\n    }\r\n  }\r\n  handleMouseUp(row, col) {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n    });\r\n  }\r\n  resetBoard() {\r\n    const newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  clearPath() {\r\n    let newGrid = getInitialGrid();\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else if (this.state.grid[row][col].isWall) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-wall\";\r\n          newGrid[row][col].isWall = true;\r\n          newGrid[row][col].isVisited = false;\r\n        } else if (this.state.grid[row][col].isVisited) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n          newGrid[row][col].isVisited = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n  }\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, speed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, speed * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, speed * i * 2);\r\n    }\r\n    this.setState({ isVisualizing: false });\r\n  }\r\n\r\n  visualizeAlgo(event) {\r\n    const algo = event.target.value;\r\n    this.setState({ isVisualizing: true });\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    let visitedNodesInOrder = null;\r\n\r\n    switch (algo) {\r\n      case \"dijkstra\":\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        break;\r\n      case \"bfs\":\r\n        visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n        break;\r\n      case \"dfs\":\r\n        visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n      default:\r\n        break;\r\n    }\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  speedHandler(e) {\r\n    if (e.target.value === \"fast\") {\r\n      speed = 10;\r\n    } else if (e.target.value === \"average\") {\r\n      speed = 20;\r\n    } else {\r\n      speed = 40;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className=\"main-nav\">\r\n          <div className=\"logo\">\r\n            <h2>\r\n              <span>P</span>ath <span>V</span>isualizer\r\n            </h2>\r\n          </div>\r\n          <div className=\"menu-link\">\r\n            <ul>\r\n              <li>\r\n                <select\r\n                  name=\"algo\"\r\n                  id=\"algoList\"\r\n                  onChange={(e) => this.visualizeAlgo(e)}\r\n                  disabled={this.state.isVisualizing}\r\n                >\r\n                  <option value=\"dijkstra\">Dijkstra</option> \r\n                  <option value=\"bfs\">BFS</option>\r\n                  <option value=\"dfs\">DFS</option>\r\n                </select>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  disabled={this.state.isVisualizing}\r\n                  className=\"button\"\r\n                  onClick={() => this.resetBoard()}\r\n                >\r\n                  Reset Board\r\n                </button>\r\n              </li>{\" \"}\r\n              <li>\r\n                <button\r\n                  disabled={this.state.isVisualizing}\r\n                  className=\"button\"\r\n                  onClick={() => this.clearPath()}\r\n                >\r\n                  Clear Path\r\n                </button>\r\n              </li>{\" \"}\r\n              <li>\r\n                <select\r\n                  name=\"speed\"\r\n                  id=\"speedList\"\r\n                  onChange={(e) => this.speedHandler(e)}\r\n                >\r\n                  <option selected value=\"fast\">\r\n                    Fast\r\n                  </option>\r\n                   <option value=\"average\">Average</option>\r\n                  <option value=\"slow\">Slow</option>\r\n                </select>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp(row, col)}\r\n                      row={row}\r\n                      onClick={() => this.handleMouseClick(row, col)}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithChangedStartNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: true,\r\n    isWall: false,\r\n  };\r\n  const previousStart = newGrid[START_NODE_ROW][START_NODE_COL];\r\n  const newPrevNod = {\r\n    ...previousStart,\r\n    isStart: false,\r\n    isWall: false,\r\n  };\r\n  newGrid[START_NODE_ROW][START_NODE_COL] = newPrevNod;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithChangedFinishNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: true,\r\n    isWall: false,\r\n  };\r\n  const previousStart = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n  const newPrevNod = {\r\n    ...previousStart,\r\n    isFinish: false,\r\n    isWall: false,\r\n  };\r\n  newGrid[FINISH_NODE_ROW][FINISH_NODE_COL] = newPrevNod;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import \"./App.css\";\r\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}